/* Copyright 2013-present Barefoot Networks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Antonin Bas (antonin@barefootnetworks.com)
 *
 */

// generated by autoconf, convenient as long as this file is not modified too
// often

#include <boost/filesystem.hpp>

#include <bm/bm_sim/_assert.h>

#include <string>

#include <cstdio>
#include <cassert>
#include <cstring>

#include "utils.h"

namespace fs = boost::filesystem;

#define CLI_PATH "@top_srcdir@/tools/runtime_CLI.py"
#define THRIFT_BINDINGS_DIR "@top_builddir@/thrift_src/gen-py/"

// this is non-portable and will only work on Unix systems
class CLIWrapperImp {
 public:
  CLIWrapperImp(int thrift_port, bool silent) {
    char cmd[256];
    sprintf(cmd, "%s --thrift-port %d",
            "PYTHONPATH=$PYTHONPATH:" THRIFT_BINDINGS_DIR " " CLI_PATH,
            thrift_port);
    if (silent) {
      sprintf(strchr(cmd, '\0'), " > /dev/null");
    }
    CLI_f = popen(cmd, "w");
    assert(CLI_f && "Error when starting runtime CLI");
  }

  ~CLIWrapperImp() {
    _BM_ASSERT(pclose(CLI_f) == 0);
  }

  void send_cmd(const std::string &cmd) {
    fprintf(CLI_f, "%s\n", cmd.c_str());
  }

 private:
  FILE *CLI_f{nullptr};
};

CLIWrapper::CLIWrapper(int thrift_port, bool silent) {
  fs::path bm_runtime_dir =
      fs::path(THRIFT_BINDINGS_DIR) / fs::path("bm_runtime");
  assert(fs::is_directory(bm_runtime_dir) && "Could not find Thrift bindings");
  assert(fs::exists(CLI_PATH) && "Could not find runtime CLI");
  imp = std::unique_ptr<CLIWrapperImp>(new CLIWrapperImp(thrift_port, silent));
}

CLIWrapper::~CLIWrapper() { }

void
CLIWrapper::send_cmd(const std::string &cmd) {
  imp->send_cmd(cmd);
}
